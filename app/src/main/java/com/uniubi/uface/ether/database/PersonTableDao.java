package com.uniubi.uface.ether.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_TABLE".
*/
public class PersonTableDao extends AbstractDao<PersonTable, Long> {

    public static final String TABLENAME = "PERSON_TABLE";

    /**
     * Properties of entity PersonTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardNO = new Property(1, String.class, "cardNO", false, "CARD_NO");
        public final static Property PseronId = new Property(2, String.class, "pseronId", false, "PSERON_ID");
        public final static Property FaceId = new Property(3, String.class, "faceId", false, "FACE_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
    }


    public PersonTableDao(DaoConfig config) {
        super(config);
    }
    
    public PersonTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CARD_NO\" TEXT," + // 1: cardNO
                "\"PSERON_ID\" TEXT," + // 2: pseronId
                "\"FACE_ID\" TEXT," + // 3: faceId
                "\"NAME\" TEXT);"); // 4: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardNO = entity.getCardNO();
        if (cardNO != null) {
            stmt.bindString(2, cardNO);
        }
 
        String pseronId = entity.getPseronId();
        if (pseronId != null) {
            stmt.bindString(3, pseronId);
        }
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(4, faceId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardNO = entity.getCardNO();
        if (cardNO != null) {
            stmt.bindString(2, cardNO);
        }
 
        String pseronId = entity.getPseronId();
        if (pseronId != null) {
            stmt.bindString(3, pseronId);
        }
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(4, faceId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PersonTable readEntity(Cursor cursor, int offset) {
        PersonTable entity = new PersonTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardNO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pseronId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // faceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardNO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPseronId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFaceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PersonTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PersonTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
